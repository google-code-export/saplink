#summary ZAKE_SVN supports checkout/checkin from SubVersion repositories powered by ZAKE using the SVN command line or TortoiseSVN client.

= Status before ZAKE_SVN =

At the moment when you want to do a distributed development using a source control system in combination with SAPLink you have to download the Project using the ZSAPLINK program. Manually check in the .nugg or .slnk file into a central repository. When another developer wants to get the current state of the project he has to manually check out the file and import them manually to their ABAP stack using ZSAPLINK again. I think this slows down the whole development process.

Watch ZAKE_SVN in action: [http://bit.ly/DJZAKE_SVNl SAP TechEd 2010 Demo Jam Submission Video]

= Idea =

Use Subversion or any other existing source control system with a command line interfacefor for all the connectivity against a central repository, but control it from the ABAP stack. To acesss the source control system's command line tool the SAP ABAP stack provides transaction SM69 where external commands can be defined. For Subversion we will define the command i.e. "C:/Programme/Subversion/bin/svn.exe" as ZSVN in SM69. Note that you have to use slashes instead of backslash also on a Windows system. For every source control system that should be supported we create a class inheriting from ZAKE.

== Checkin process ==

The interface to the classes can be a report transaction with this parameters:

  * Radiobuttons to select checkin or checkout
  * Package to export (alternatively define objects in an itab)
  * Comment to add to this new revision
  * Local path to the source files
  * Local path and name of the created SAPLink Nugget
  * URL of the central repository
  * Class of the source control system to use
  * Username and Password for the central repository (not required when you have filled the ZAKE_USERDATA table)

The program will then execute this steps

  * Read all objects from the provided package and fill them into a internal table with Object Type and Object Name (or take the manually filled itab)
  * Create a Slinkee for every entry of the objects table

The Slinkees will be created in this structure:

{{{
<Package Name>
  <Object Type>
    <Object Name>.slnk
}}}

  * Export the Slinkee's to the provided local path for the source files. I think every Object Type should go into a folder named by the Object Type which is a subfolder with the package name. Example: ZAKE_SVN/CLAS/ZCL_ZAKE_SVN.slnk.
  * In addition to the Slinkee's a Nugget is created and also provided as a ZIP file
  * Call the source control system command line tool by executing the cl_gui_frontend_services=>execute to checkin the files in the export folder

== Checkout process ==

For the checkout we use the same transaction as before and choose the checkout radio button. Then we will get this parameters:

  * Local path to the source files
  * URL of the central repository
  * Class of the source control system to use

The program will then execute this steps

  * Call the source control system command line tool by executing the cl_gui_frontend_services=>execute to checkout the files from the central repository and place them in the local folder
  * Read the different Slinkee files
  * Delete existing Objects
  * Import the Slinkee's using SAPlink (can be restricted by an itab with Object Type and Names)
  * Syntax check objects
  * Activate objects

= Challenges =

  * How to interact with the source control system to merge different developments? I think here we can leverage the ABAP version system. When we import new code from the repository and activate it we can see the differences in the historic Version.
  * When they are conflicts in the versions the command line SVN Client tries to prompt the user for confirmation. But that only results in a timeout in the OS call. I will try if TortoiseSVN will popup a window where the User can interact.

= Implementation = 

== Read table of Object Types and Object Names of a package ==

This is currently implemented in the ZSAPLINK program. I think i move that into ZAKE as a instance method SETPACKAGEOBJECTS returning the table type ZPACKAGE_OBJECTS.

== Create Slinkee's ==

Another Method I think that should be added to ZAKE. It will check that for all the Object Types provided in the importing table parameter of type ZPACKAGE_OBJECTS SAPlink plugins are installed.

==Create Slinkee==

A private function that should be added to ZAKE to export every Object to the LOCALPATH specified in the ZAKE constructor. When new directories are created, SVN needs them to be added to the version control. So in the CREATESLINKEE I call the protected method ADDSLINKEETOVERSIONCONTROL.

==Checkin or commit==

To check in or commit the changes I provide the CHECKIN Method.

Abstract version control system commands

To hide the call of the SXPG_COMMAND_EXECUTE_LONG funciton module I provide the private method EXECUTESVNCOMMAND.

==Checkout==

Method to read the Slinkee's from the central repository.

==Install Slinkee's==

Read all the Slinkee's from the local directory recursively. Read them into a IF_IXML_DOCUMENT that can be provided to the INSTALL method.

=Setup=

==Prerequisites==

I assume that you're running the SAP NetWeaver 7.01 SR1 SP3 ABAP Trial Version (NSP) available for download at SDN.

==Preperation==

Download and install SAPlink.

Install the SAPlink plug-in for Data Dictionary Elements.

Download the Windows Version of Subversion from here and install it on your local machine. If you want to test the TortoiseSVN Client download it from here and install it on your local machine. You can also install it in parallel to the Subversion client.

Download ZAKE.nugg.zip from the SAPlink project page which include:

  * A SAPlink Nugget that you have to install using SAP Link. It provides the ZAKE Class, the ZCL_ZAKE_SVN Class which extends ZAKE to support SVN and the ZCL_ZAKE_TORTOISE_SVN Class which also extends ZAKE to support the TortoiseSVN Client. It also provides the Program Z_ZAKE_SVN_TEST which you can use to test the commit and checkout of the also provided Classes ZCL_SVNTEST and ZCL_SVNTEST2 and Programs ZSVNTEST and ZSVNTEST2. First you have to activate the database table ZAKE_USERDATA which is only visible in SE11. You will get the warning "Table ZAKE_USERDATA: Key length > 120 (Restricted functionality)" but that is OK. Then go to SE80 and activate the classes and programs.
  * Two CMD scripts "svn-script.cmd" and "tortoise-svn-script.cmd". By default they have to placed in C:\Projects\.
But when you define a environment variable ZAKE_HOME and set it to i.e. F:\Projects\ you can place the CMD files there. If you have not installed SVN or TortoiseSVN as a sub-folder of %ProgramFiles% then you have to change this in the CMD scripts.
==Test==
Start the Z_ZAKE_SVN_TEST program and choose the radiobutton CHECKOUT and uncheck TESTRUN. Execute the program and it will download the latest version from the provided repository. Then you can do some changes to the ZCL_SVNTEST class or ZSVNTEST program. Go back into the Z_ZAKE_SVN_TEST program and choose the radiobutton CHECKIN, provide a COMMENT and uncheck TESTRUN. Run the program and you will commit a new version.
=Demo=
Watch a little demo available at http://screencast.com/t/NzIzZDM5.
=Status=
  * I was able to do my first commit today to my yubico-abap project using the command line integration. Check out revision 4.
  * 2009-12-17: Checkin against a local running SVN repository worked.
  * 2009-12-19: Checkout from SVN repository worked.
  * 2009-12-21: I try to run the SVN command by using cl_gui_frontend_services=>execute so you don't need to run SAP GUI and the Server on the same machine.
  * 2009-12-21: Running SVN using cl_gui_frontend_services=>execute works now. CMD Script is needed to get the output back to the SAP GUI.
  * 2009-12-26: Modified the class and programs to support ABAP WebAS 6.20.
  * 2010-01-05: Enhanched the add to repository functionality, Added posibility to create a SAPlink Nugget directly, Added ZIP export for SAPlink Nugget
  * 2010-01-06: Corrections for WebAS ABAP 6.20 support
  * 2010-01-10: Changed method and parameter names according to SAP coding guidelines, added DB-table to store version control user account data
  * 2010-01-14: Import to ABAP system can now be restricted by an itab
  * 2010-01-30: Added class ZCL_ZAKE_TORTOISE_SVN to support TortoiseSVN Client; split up in 3 Packages: ZAKE, ZAKE_SVN and ZAKE_SVN_TESTS; Radio Buttions in the Z_ZAKE_SVN and Z_ZAKE_SVN_TEST Program to select Version Control Client Program
  * 2010-03-07: Added ADD_FILES_TO_ZIP method and Updated DOWNLOAD_ZIP_TO_LM method to allow additional files in the ZIP
  * 2010-04-01: Built a complete package containing ZAKE, ZAKE_SVN and ZAKE_SVN_TESTS to be the featured download at http://code.google.com/p/saplink/
  * 2010-04-14: Solved SAPlink Issue 183 by supporting the ZAKE_HOME environment variable